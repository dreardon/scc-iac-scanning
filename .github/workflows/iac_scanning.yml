name: IaC Code Scanning w/ Security Command Center (SCC)

on:
 push:
    branches:
      - '*'

env:
  WORKLOAD_IDENTITY_POOL: ${{ vars.WORKLOAD_IDENTITY_POOL }}
  WORKLOAD_IDENTITY_PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
  WORKLOAD_IDENTITY_POOL_PROJECT_NUMBER: ${{ vars.WORKLOAD_IDENTITY_POOL_PROJECT_NUMBER }}
  WORKLOAD_IDENTITY_PROJECT_ID: ${{ vars.WORKLOAD_IDENTITY_PROJECT_ID }}
  TF_VAR_BQ_OWNER: ${{ vars.TF_VAR_BQ_OWNER }}
  TF_VAR_ORGANIZATION_ID: ${{ vars.TF_VAR_ORGANIZATION_ID }}
  TF_VAR_PROJECT_ID: ${{ vars.TF_VAR_PROJECT_ID }}
  TF_VAR_REGION: ${{ vars.TF_VAR_REGION }}
  TF_VAR_ZONE: ${{ vars.TF_VAR_ZONE }}

permissions:
  id-token: write 
  contents: read

jobs:
  iac_scan_report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
            project_id: ${{ vars.TF_VAR_PROJECT_ID }}
            workload_identity_provider: 'projects/${{ vars.WORKLOAD_IDENTITY_POOL_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.WORKLOAD_IDENTITY_POOL }}/providers/${{ vars.WORKLOAD_IDENTITY_PROVIDER }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate        

      - name: Create Terraform Plan
        run: terraform plan -out=mainplan.tfplan
        id: plan    

      - name: Convert Terraform Plan to JSON
        id: convert
        run: terraform show -no-color -json mainplan.tfplan > mainplan.json

      - id: 'analyze-code-security-scc'
        uses: 'google-github-actions/analyze-code-security-scc@v0'
        with:
          organization_id: ${{ vars.ORGANIZATION_ID }}
          scan_file_ref: './mainplan.json'
          iac_type: 'terraform'
          scan_timeout: '1m'
          ignore_violations: true
          failure_criteria: 'High:1,Medium:1,Low:1,Operator:or'
          fail_silently: false

      - name: Summarize Counts and Output Results
        id: summarize-vulnerabilities
        run: |
          echo 'The result of the terraform code scan was "${{ steps.analyze-code-security-scc.outputs.iac_scan_result }}"'
          SARIF_PATH="${{ steps.analyze-code-security-scc.outputs.iac_scan_result_sarif_path }}"
          if [[ -z "$SARIF_PATH" || ! -f "$SARIF_PATH" ]]; then
            echo "No SARIF file found or path is empty. Skipping vulnerability summary."
            exit 0
          fi

          # jq command to extract and count vulnerabilities by severity
          SUMMARY=$(cat "$SARIF_PATH" | jq -r '
            .runs[0].tool.driver.rules | group_by(.properties.severity) | map({(.[] | .properties.severity):length}) | add
          ')

          if [[ -z "$SUMMARY" ]]; then
            echo "No vulnerabilities found"
            exit 0
          fi

          # Extract counts for each severity level, default to 0 if not present
          HIGH=$(echo "$SUMMARY" | jq -r '.HIGH // 0')
          MEDIUM=$(echo "$SUMMARY" | jq -r '.MEDIUM // 0')
          LOW=$(echo "$SUMMARY" | jq -r '.LOW // 0')

          # Format the output string
          SUMMARY_STRING="HIGH: $HIGH, MEDIUM: $MEDIUM, LOW: $LOW"
          echo $SUMMARY_STRING
          cat "$SARIF_PATH" | jq -r 

      - if: |-
          ${{ !cancelled() && steps.analyze-code-security-scc.outputs.iac_scan_result_sarif_path != '' }}
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'sarif'
          path: '${{ steps.analyze-code-security-scc.outputs.iac_scan_result_sarif_path }}'